# azure-pipelines.yml
variables:
  - name: terraformFolder
    value: terraform
  - name: imageRepository
    value: azure-container-registry-name.azurecr.io
  - name: imageName
    value: react-app
  - name: imageTag
    value: $(Build.BuildId)
  - name: service-connection
    value: assessment
  - name: ResourceGroupName
    value: oluseungrpnew
  - name: StorageAccountName
    value : oluwaseunstrg
  - name: ContainerName
    value: oluwaseuncontainer
  - name: Location
    value: "eastus2"
trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  
  - task: Bash@3
    inputs:
      filePath: './terraform/create_backend.sh'
      arguments: '$(ResourceGroupName) $(StorageAccountName) $(Location)'
  -
- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    workingDirectory: "./$(terraformFolder)"
    command: 'init'
    backendServiceArm: $(service-connection)
    backendAzureRmResourceGroupName: $(pipeline.backend_resource_group)
    backendAzureRmContainerName: $(pipeline.backend_container)
    backendAzureRmKey: "terraform.tfstate"
    backendAzureRmStorageAccountName: $(pipeline.backend_storage_account)
  # - task: TerraformTaskV1@0
  #   displayName: Terraform init
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'init'
  #     workingDirectory: '$(terraformFolder)'
  #     backendServiceArm: '$(Pipeline.Workspace)/backend-config.txt'
  #     # backendAzureRmStorageAccountName: '$(tf-backend-sa-name)'
  #     # backendAzureRmContainerName: '$(tf-backend-container-name)'
  #     # backendAzureRmKey: '$(tf-backend-key)'
  #   # dependsOn: Create Terraform backend
  # - task: TerraformTaskV1@0
  #   displayName: Terraform validate
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'validate'
  #     workingDirectory: '$(terraformFolder)'
      
  # - task: TerraformTaskV1@0
  #   displayName: Terraform plan
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'plan'
  #     environmentServiceNameAzureRM: '$(service-connection)'
  #     workingDirectory: '$(terraformFolder)'

  # - task: TerraformTaskV1@0
  #   displayName: Terraform apply
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'apply'
  #     environmentServiceNameAzureRM: '$(service-connection)'
  #     workingDirectory: '$(terraformFolder)'
  #     args: '-auto-approve'

  # - task: NodeTool@0
  #   displayName: Install Node.js
  #   inputs:
  #     versionSpec: '16.x'

  # - script: |
  #     npm install
  #   displayName: Install app dependencies

  # - script: |
  #     npm run test
  #   displayName: Test app

  # - script: |
  #     npm run build
  #   displayName: Build app

  # # - task: Docker@2
  # #   displayName: Build Docker image
  # #   inputs:
  # #     containerRegistry: $(azure-container-registry-name)
  # #     repository: $(imageRepository)/$(imageName)
  # #     command: build
  # #     Dockerfile: $(System.DefaultWorkingDirectory)/Dockerfile
  # #     tags: |
  # #       $(imageTag)

  # # - task: Docker@2
  # #   displayName: Push Docker image
  # #   inputs:
  # #     containerRegistry: $(azure-container-registry-name)
  # #     repository: $(imageRepository)/$(imageName)
  # #     command: push
  # #     tags: |
  # #       $(imageTag)
