# azure-pipelines.yml
variables:
  - name: terraformFolder
    value: terraform
  - name: imageRepository
    value: azure-container-registry-name.azurecr.io
  - name: imageName
    value: react-app
  - name: imageTag
    value: $(Build.BuildId)
  - name: service-connection
    value: assessment
  - name: ResourceGroupName
    value: oluseungrpnew
  - name: StorageAccountName
    value : oluwaseunstrg
  - name: ContainerName
    value: oluwaseuncontainer
  - name: Location
    value: "eastus-2"
trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: '1.1.4'
  
  
  - task: Bash@3
    displayName: 'Create backend resources'
    inputs:
      targetType: 'inline'
      script: |
        #!/bin/bash
        # Set variables
        RESOURCE_GROUP="<your-resource-group>"
        STORAGE_ACCOUNT="<your-storage-account-name>"
        CONTAINER="<your-container-name>"
        LOCATION="eastus2"
        
        # Create resource group if it doesn't exist
        if [ $(az group exists -n $RESOURCE_GROUP) = false ]; then
          az group create -n $RESOURCE_GROUP -l $LOCATION
        fi
        
        # Create storage account if it doesn't exist
        if [ $(az storage account check-name -n $STORAGE_ACCOUNT --query "nameAvailable") = true ]; then
          az storage account create -n $STORAGE_ACCOUNT -g $RESOURCE_GROUP --sku Standard_LRS --encryption-services blob
        fi
        
        # Create container if it doesn't exist
        if [ $(az storage container exists -n $CONTAINER --account-name $STORAGE_ACCOUNT --account-key $(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query '[0].value' -o tsv) --query "exists") = false ]; then
          az storage container create -n $CONTAINER --account-name $STORAGE_ACCOUNT --account-key $(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query '[0].value' -o tsv)
        fi
        
        # Output Terraform backend configuration
        echo "backend \"azurerm\" {" > backend-config.txt
        echo "  resource_group_name = \"$RESOURCE_GROUP\"" >> backend-config.txt
        echo "  storage_account_name = \"$STORAGE_ACCOUNT\"" >> backend-config.txt
        echo "  container_name = \"$CONTAINER\"" >> backend-config.txt
        echo "  key = \"terraform.tfstate\"" >> backend-config.txt
        echo "}" >> backend-config.txt
        
        cat backend-config.txt

  - task: PublishBuildArtifacts@1
    displayName: 'Publish backend config'
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/backend-config.txt'
      ArtifactName: 'backend-config'
      publishLocation: 'Container'

  - task: TerraformTaskV1@0
    displayName: 'Terraform init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: '$(Pipeline.Workspace)/backend-config.txt'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  # - task: TerraformTaskV1@0
  #   displayName: Terraform init
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'init'
  #     workingDirectory: '$(terraformFolder)'
  #     backendServiceArm: '$(Pipeline.Workspace)/backend-config.txt'
  #     # backendAzureRmStorageAccountName: '$(tf-backend-sa-name)'
  #     # backendAzureRmContainerName: '$(tf-backend-container-name)'
  #     # backendAzureRmKey: '$(tf-backend-key)'
  #   # dependsOn: Create Terraform backend
  # - task: TerraformTaskV1@0
  #   displayName: Terraform validate
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'validate'
  #     workingDirectory: '$(terraformFolder)'
      
  # - task: TerraformTaskV1@0
  #   displayName: Terraform plan
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'plan'
  #     environmentServiceNameAzureRM: '$(service-connection)'
  #     workingDirectory: '$(terraformFolder)'

  # - task: TerraformTaskV1@0
  #   displayName: Terraform apply
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'apply'
  #     environmentServiceNameAzureRM: '$(service-connection)'
  #     workingDirectory: '$(terraformFolder)'
  #     args: '-auto-approve'

  # - task: NodeTool@0
  #   displayName: Install Node.js
  #   inputs:
  #     versionSpec: '16.x'

  # - script: |
  #     npm install
  #   displayName: Install app dependencies

  # - script: |
  #     npm run test
  #   displayName: Test app

  # - script: |
  #     npm run build
  #   displayName: Build app

  # # - task: Docker@2
  # #   displayName: Build Docker image
  # #   inputs:
  # #     containerRegistry: $(azure-container-registry-name)
  # #     repository: $(imageRepository)/$(imageName)
  # #     command: build
  # #     Dockerfile: $(System.DefaultWorkingDirectory)/Dockerfile
  # #     tags: |
  # #       $(imageTag)

  # # - task: Docker@2
  # #   displayName: Push Docker image
  # #   inputs:
  # #     containerRegistry: $(azure-container-registry-name)
  # #     repository: $(imageRepository)/$(imageName)
  # #     command: push
  # #     tags: |
  # #       $(imageTag)
