# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  - name: terraformFolder
    value: terraform
  - name: service-connection
    value: assessment
  - name: ResourceGroupName
    value: oluseungrpnew
  - name: StorageAccountName
    value : oluwaseunstrrandiii
  - name: ContainerName
    value: oluwaseuncontainer
  - name: Location
    value: "eastus2"
    
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - terraform/

pool:
  vmImage: ubuntu-latest

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  
  - task: Bash@3
    inputs:
      filePath: './terraform/create_backend.sh'
      arguments: '$(ResourceGroupName) $(StorageAccountName) $(Location) $(password)'
      
  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      workingDirectory: './$(terraformFolder)'
      command: 'init'
      backendServiceArm: $(service-connection)
      backendAzureRmResourceGroupName: $(pipeline.backend_resource_group)
      backendAzureRmContainerName: $(pipeline.backend_container)
      backendAzureRmKey: 'terraform.tfstate'
      backendAzureRmStorageAccountName: $(pipeline.backend_storage_account)
  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: './$(terraformFolder)'

  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: './$(terraformFolder)'
      environmentServiceNameAzureRM: 'assessment'

  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: './$(terraformFolder)'
      commandOptions: '--auto-approve'
      environmentServiceNameAzureRM: 'assessment'
      

