# azure-pipelines.yml
variables:
  - name: terraformFolder
    value: terraform
  - name: imageRepository
    value: azure-container-registry-name.azurecr.io
  - name: imageName
    value: react-app
  - name: imageTag
    value: $(Build.BuildId)
  - name: service-connection
    value: assessment
  - name: ResourceGroupName
    value: oluseungrpnew
  - name: StorageAccountName
    value : oluwaseunstrg
  - name: ContainerName
    value: oluwaseuncontainer
  - name: Location
    value: "eastus-2"
trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: '1.1.4'
  
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(service-connection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Set variables
        resourceGroup=$(ResourceGroupName)
        storageAccountName=$(StorageAccountName)
        containerName=$(ContainerName)
        
        # Create resource group if it doesn't exist
        az group create --name $resourceGroup --location $(Location)
        
        # Create storage account
        az storage account create --name $storageAccountName --resource-group $resourceGroup --sku Standard_LRS --encryption-services blob
        
        # Create container for Terraform state file
        az storage container create --account-name $storageAccountName --account-key $(az storage account keys list --resource-group $resourceGroup --account-name $storageAccountName --query '[0].value' -o tsv) --name $containerName
        
        # Output Terraform backend configuration
        echo "backend \"azurerm\" {" > backend-config.txt
        echo "  resource_group_name = \"$resourceGroup\"" >> backend-config.txt
        echo "  storage_account_name = \"$storageAccountName\"" >> backend-config.txt
        echo "  container_name = \"$containerName\"" >> backend-config.txt
        echo "  key = \"terraform.tfstate\"" >> backend-config.txt
        echo "}" >> backend-config.txt
        
        cat backend-config.txt
    displayName: 'Create Terraform backend'
  - task: TerraformTaskV1@0
    displayName: Terraform init
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(terraformFolder)'
      backendServiceArm: "$(cat backend-config.txt)"
      # backendAzureRmStorageAccountName: '$(tf-backend-sa-name)'
      # backendAzureRmContainerName: '$(tf-backend-container-name)'
      # backendAzureRmKey: '$(tf-backend-key)'
  - task: TerraformTaskV1@0
    displayName: Terraform validate
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: '$(terraformFolder)'
      
  - task: TerraformTaskV1@0
    displayName: Terraform plan
    inputs:
      provider: 'azurerm'
      command: 'plan'
      environmentServiceNameAzureRM: '$(service-connection)'
      workingDirectory: '$(terraformFolder)'

  - task: TerraformTaskV1@0
    displayName: Terraform apply
    inputs:
      provider: 'azurerm'
      command: 'apply'
      environmentServiceNameAzureRM: '$(service-connection)'
      workingDirectory: '$(terraformFolder)'
      args: '-auto-approve'

  - task: NodeTool@0
    displayName: Install Node.js
    inputs:
      versionSpec: '16.x'

  - script: |
      npm install
    displayName: Install app dependencies

  - script: |
      npm run test
    displayName: Test app

  - script: |
      npm run build
    displayName: Build app

  # - task: Docker@2
  #   displayName: Build Docker image
  #   inputs:
  #     containerRegistry: $(azure-container-registry-name)
  #     repository: $(imageRepository)/$(imageName)
  #     command: build
  #     Dockerfile: $(System.DefaultWorkingDirectory)/Dockerfile
  #     tags: |
  #       $(imageTag)

  # - task: Docker@2
  #   displayName: Push Docker image
  #   inputs:
  #     containerRegistry: $(azure-container-registry-name)
  #     repository: $(imageRepository)/$(imageName)
  #     command: push
  #     tags: |
  #       $(imageTag)
