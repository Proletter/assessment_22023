# azure-pipelines.yml
variables:
  - name: terraformFolder
    value: terraform
  - name: imageRepository
    value: azure-container-registry-name.azurecr.io
  - name: imageName
    value: react-app
  - name: imageTag
    value: $(Build.BuildId)
  - name: service-connection
    value: assessment
  - name: ResourceGroupName
    value: oluseungrpnew
  - name: StorageAccountName
    value : oluwaseunstrg
  - name: ContainerName
    value: oluwaseuncontainer
  - name: Location
    value: "eastus2"
trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: '1.1.4'
  
  - task: AzurePowerShell@5
    inputs:
      azureSubscription: '$(service-connection)'
      ScriptType: 'InlineScript'
      Inline: |
        $resourceGroupName = '$(ResourceGroupName)'
        $storageAccountName = '$(StorageAccountName)'
        $containerName = '$(ContainerName)'
        $location = 'eastus2'
        
        # Create resource group
        New-AzResourceGroup -Name $resourceGroupName -Location $location
        
        # Create storage account
        $storageAccount = New-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName -Location $location -SkuName 'Standard_LRS' -Kind 'StorageV2' -EnableHttpsTrafficOnly $true -AccessTier 'Hot' -MinimumTlsVersion 'TLS1_2' -AllowBlobPublicAccess $false
        
        # Create container
        $ctx = $storageAccount.Context
        New-AzStorageContainer -Name $containerName -Context $ctx
    displayName: 'Create Terraform backend'
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $resourceGroupName = '<your-resource-group>'
        $storageAccountName = '<your-storage-account-name>'
        $containerName = '<your-container-name>'
        
        $config = @{
          backend = 'azurerm'
          config = @{
            resource_group_name = $resourceGroupName
            storage_account_name = $storageAccountName
            container_name = $containerName
            key = 'terraform.tfstate'
          }
        }
        $config | ConvertTo-Json -Depth 100 | Out-File -FilePath '$(Build.ArtifactStagingDirectory)/backend-config.json'
    displayName: 'Output Terraform backend configuration'
  - task: TerraformTaskV1@0
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendType: 'AzureRM'
      backendConfig: '$(System.DefaultWorkingDirectory)/_backend-config/backend-config.json'
      workingDirectory: '$(terraformFolder)'
    displayName: 'Terraform init'

  # - task: TerraformTaskV1@0
  #   displayName: Terraform init
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'init'
  #     workingDirectory: '$(terraformFolder)'
  #     backendServiceArm: '$(Pipeline.Workspace)/backend-config.txt'
  #     # backendAzureRmStorageAccountName: '$(tf-backend-sa-name)'
  #     # backendAzureRmContainerName: '$(tf-backend-container-name)'
  #     # backendAzureRmKey: '$(tf-backend-key)'
  #   # dependsOn: Create Terraform backend
  # - task: TerraformTaskV1@0
  #   displayName: Terraform validate
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'validate'
  #     workingDirectory: '$(terraformFolder)'
      
  # - task: TerraformTaskV1@0
  #   displayName: Terraform plan
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'plan'
  #     environmentServiceNameAzureRM: '$(service-connection)'
  #     workingDirectory: '$(terraformFolder)'

  # - task: TerraformTaskV1@0
  #   displayName: Terraform apply
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'apply'
  #     environmentServiceNameAzureRM: '$(service-connection)'
  #     workingDirectory: '$(terraformFolder)'
  #     args: '-auto-approve'

  # - task: NodeTool@0
  #   displayName: Install Node.js
  #   inputs:
  #     versionSpec: '16.x'

  # - script: |
  #     npm install
  #   displayName: Install app dependencies

  # - script: |
  #     npm run test
  #   displayName: Test app

  # - script: |
  #     npm run build
  #   displayName: Build app

  # # - task: Docker@2
  # #   displayName: Build Docker image
  # #   inputs:
  # #     containerRegistry: $(azure-container-registry-name)
  # #     repository: $(imageRepository)/$(imageName)
  # #     command: build
  # #     Dockerfile: $(System.DefaultWorkingDirectory)/Dockerfile
  # #     tags: |
  # #       $(imageTag)

  # # - task: Docker@2
  # #   displayName: Push Docker image
  # #   inputs:
  # #     containerRegistry: $(azure-container-registry-name)
  # #     repository: $(imageRepository)/$(imageName)
  # #     command: push
  # #     tags: |
  # #       $(imageTag)
